//
//  EditGroupViewController.swift
//  SuiteLife
//
//  Created by cssummer17 on 6/30/17.
//  Copyright Â© 2017 cssummer17. All rights reserved.
//

import UIKit
import Firebase

class EditGroupViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {

    // MARK: Properties and Outlets
    
    var memberArray: [User] = []
    var groupID: String?
    let databaseRef = Database.database().reference()
    let currentUserID = Auth.auth().currentUser!.uid
    
    @IBOutlet weak var nameField: UITextField!

    @IBOutlet weak var tableView: UITableView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Set up the Table View
        tableView.delegate = self
        tableView.dataSource = self
        tableView.separatorStyle = .none
        
        // Add the current user to the group
        createUsersByID(userIDs: [self.currentUserID])
    }
    
    
    // MARK: Table View
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return memberArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cellIdentifier = "UserNameAndHandleTableViewCell"
        let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as! UserNameAndHandleTableViewCell
        cell.nameLabel.text = memberArray[indexPath.row].name
        cell.handleLabel.text = "@\(memberArray[indexPath.row].handle)"
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        // When a row is selected, try to remove the member represented by that row.
        removeMember(at: indexPath.row)
    }
    
    
    // MARK: Private Methods
    
    private func saveGroup() {
        var group: DatabaseReference
        let currentUser = databaseRef.child("users/\(currentUserID)")
        // If no groupID was specified (i.e. we're making a new group), have the ID autogenerated.
        if groupID == nil {
            group = databaseRef.child("groups").childByAutoId()
        }
        // Otherwise, use the specified ID.
        else {
            group = databaseRef.child("groups/\(groupID!)")
        }
        // Set the name.
        group.child("name").setValue(nameField.text)
        
        // Initialize pantry with a default item. Code for list is here too, but I shouldn't ever need it. 
//        let newList: [[String:Any]] = [[Item(name: "Add items to your list here!", checked: false, price: 0).toDict()]]
        let newPantry: [[String:Any]] = [[Item(name: "Add items to your pantry here!", checked: false, price: 0).toDict()]]
//        group.child("list").setValue(newList)
        group.child("pantry").setValue(newPantry)

        // TODO: replace line below with call to removeMembers() -- keep track of which members to remove
        // Clear the whole members tree.
        group.child("members").setValue(nil)
        // First save the user into the group so that it can be edited (this is based on the Firebase rules).
        group.child("members/\(currentUserID)").setValue(true)
        currentUser.child("groups/\(group.key)").setValue(true)
        // Then set the remaining user values
        for member in memberArray {
            // We've already set the currentUserID, so don't bother.
            if member.userID != currentUserID {
                let child = group.child("members/\(member.userID)")
                child.setValue(true)
                databaseRef.child("users/\(member.userID)/groups/\(group.key)").setValue(true)
                print("Saved \(member) to group.")
            }
        }
    }
    
    private func createUsersByID(userIDs: [String]) {
        for userID in userIDs {
            // Only add a user not already in the array.
            if !memberArray.contains{$0.userID == userID}{
                print("User ID is: \(userID)")
                databaseRef.child("users/\(userID)").observeSingleEvent(of: .value, with: { snapshot in
                    let name = snapshot.childSnapshot(forPath: "name").value as! String
                    let handle = snapshot.childSnapshot(forPath: "handle").value as! String
                    // Call to addMember ensures that the current user isn't duplicated in memberArray
                    self.addMember(member: User(name: name, handle: handle, userID: userID))
                    if userID == userIDs.last {
                        self.tableView.reloadData()
                    }
                })
            }
        }
    }
    
    private func removeMember(at index: Int) {
        // Create an alert.
        var alert: UIAlertController
        // If the current user is not the one being deleted
        if currentUserID != memberArray[index].userID {
            // Set up the alert and add deletion to the callback.
            alert = UIAlertController(title: "Remove \(memberArray[index].name)?", message: nil, preferredStyle: .alert)
            alert.addAction(.init(title: "Cancel", style: .cancel, handler: nil))
            alert.addAction(.init(title: "OK", style: .default, handler: {(element) in
                self.memberArray.remove(at: index)
                self.tableView.deleteRows(at: [IndexPath(row: index, section: 0)], with: .fade)
            }))
        }
        // If the current user is trying to delete themselves, let them know they can't.
        else {
            alert = UIAlertController(title: "You cannot remove yourself from a group here.", message: "To leave a group, delete that group from the Groups menu.", preferredStyle: .alert)
            alert.addAction(.init(title: "OK", style: .default, handler: nil))
        }
        present(alert, animated: true, completion: nil)

    }
    
    // MARK: Public Methods
    
    func loadGroup(groupID: String) {
        print("Calling load group")
        self.groupID = groupID
        // If we're given a groupID, we're going to be editing an existing group, so change the title to reflect that.
        navigationItem.title = "Edit Group"
        databaseRef.child("groups/\(groupID)").observeSingleEvent(of: .value, with: { snapshot in
            // Get the name.
            self.nameField.text = snapshot.childSnapshot(forPath: "name").value as? String
            // The memberIDs are the keys of all the children in the node "members"
            let children = snapshot.childSnapshot(forPath: "members").children
            var memberIDArray: [String] = []
            for child in children {
                memberIDArray.append((child as! DataSnapshot).key)
            }
            self.createUsersByID(userIDs: memberIDArray)
        }) { (error) in
            print(error.localizedDescription)}
    }
    
    func addMember(member: User) {
        if !memberArray.contains(member) {
            memberArray.append(member)
            tableView.reloadData()
        }
    }
    
    // MARK: Cancel Button
    
    @IBAction func cancelButtonPressed(_ sender: UIBarButtonItem) {
        print("Cancel button was pressed.")
        dismiss(animated: true, completion: nil)
    }
    
    @IBAction func saveButtonPressed(_ sender: UIBarButtonItem) {
        print("Save button was pressed.")
        saveGroup()
        dismiss(animated: true, completion: nil)
    }
    
 
}
